import os
import shutil
import subprocess

# Caminhos do modelo e pastas de configura√ß√£o
MODEL_PATH = "./models/llama_model.zip"
EXTRACT_PATH = "./models/"

def delete_model():
    # Exclui o modelo e dados
    print("üîÑ Deletando o modelo e dados da Lia...")
    if os.path.exists(MODEL_PATH):
        os.remove(MODEL_PATH)
        print("‚úÖ Arquivo do modelo exclu√≠do.")
    else:
        print("‚ö†Ô∏è O modelo j√° foi exclu√≠do anteriormente ou n√£o encontrado.")

    # Exclui a pasta de extra√ß√£o do modelo
    if os.path.exists(EXTRACT_PATH):
        shutil.rmtree(EXTRACT_PATH)
        print("‚úÖ Diret√≥rio de modelos limpo.")
    else:
        print("‚ö†Ô∏è Diret√≥rio de modelos n√£o encontrado ou j√° exclu√≠do.")

def reinstall_model():
    # Re-executa o processo de download e setup
    print("üå± Renascento a Lia com uma nova configura√ß√£o...")
    download_model()
    extract_model()
    install_dependencies()
    print("üå∏ A Lia renasceu e est√° pronta para um novo come√ßo!")

def download_model():
    MODEL_URL = "https://link_do_modelo_llama.com/llama_model.zip"  # Substitua pelo link real do modelo
    print("üîÑ Baixando o modelo LLaMA...")
    urllib.request.urlretrieve(MODEL_URL, MODEL_PATH)
    print("‚úÖ Download conclu√≠do!")

def extract_model():
    print("üîÑ Extraindo o modelo...")
    with zipfile.ZipFile(MODEL_PATH, 'r') as zip_ref:
        zip_ref.extractall(EXTRACT_PATH)
    print("‚úÖ Modelo extra√≠do com sucesso!")

def install_dependencies():
    print("üîÑ Instalando depend√™ncias...")
    try:
        subprocess.check_call(["pip", "install", "-r", "requirements.txt"])
        print("‚úÖ Depend√™ncias instaladas!")
    except subprocess.CalledProcessError:
        print("‚ö†Ô∏è Erro ao instalar as depend√™ncias. Verifique o arquivo requirements.txt.")

def kill_and_renew_lia():
    print("‚ö†Ô∏è A Lia ser√° dispensada agora. Todos os dados e modelos ser√£o exclu√≠dos.")
    delete_model()
    reinstall_model()

if __name__ == "__main__":
    kill_and_renew_lia()